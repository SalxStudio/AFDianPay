/*
 * This file is generated by jOOQ.
 */
package com.imzcc.plugins.module.jooq.tables;


import com.imzcc.plugins.module.jooq.DefaultSchema;
import com.imzcc.plugins.module.jooq.Keys;
import com.imzcc.plugins.module.jooq.tables.records.AfdianOrderRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AfdianOrder extends TableImpl<AfdianOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Afdian_Order</code>
     */
    public static final AfdianOrder AFDIAN_ORDER = new AfdianOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AfdianOrderRecord> getRecordType() {
        return AfdianOrderRecord.class;
    }

    /**
     * The column <code>Afdian_Order.out_trade_no</code>.
     */
    public final TableField<AfdianOrderRecord, String> OUT_TRADE_NO = createField(DSL.name("out_trade_no"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>Afdian_Order.custom_order_id</code>.
     */
    public final TableField<AfdianOrderRecord, String> CUSTOM_ORDER_ID = createField(DSL.name("custom_order_id"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.user_id</code>.
     */
    public final TableField<AfdianOrderRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.user_private_id</code>.
     */
    public final TableField<AfdianOrderRecord, String> USER_PRIVATE_ID = createField(DSL.name("user_private_id"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.plan_id</code>.
     */
    public final TableField<AfdianOrderRecord, String> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.month</code>.
     */
    public final TableField<AfdianOrderRecord, Long> MONTH = createField(DSL.name("month"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>Afdian_Order.total_amount</code>.
     */
    public final TableField<AfdianOrderRecord, String> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.show_amount</code>.
     */
    public final TableField<AfdianOrderRecord, String> SHOW_AMOUNT = createField(DSL.name("show_amount"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.status</code>.
     */
    public final TableField<AfdianOrderRecord, Long> STATUS = createField(DSL.name("status"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>Afdian_Order.remark</code>.
     */
    public final TableField<AfdianOrderRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.redeem_id</code>.
     */
    public final TableField<AfdianOrderRecord, String> REDEEM_ID = createField(DSL.name("redeem_id"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.product_type</code>.
     */
    public final TableField<AfdianOrderRecord, Long> PRODUCT_TYPE = createField(DSL.name("product_type"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>Afdian_Order.discount</code>.
     */
    public final TableField<AfdianOrderRecord, String> DISCOUNT = createField(DSL.name("discount"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.address_person</code>.
     */
    public final TableField<AfdianOrderRecord, String> ADDRESS_PERSON = createField(DSL.name("address_person"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.address_phone</code>.
     */
    public final TableField<AfdianOrderRecord, String> ADDRESS_PHONE = createField(DSL.name("address_phone"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>Afdian_Order.address_address</code>.
     */
    public final TableField<AfdianOrderRecord, String> ADDRESS_ADDRESS = createField(DSL.name("address_address"), SQLDataType.VARCHAR(30), this, "");

    private AfdianOrder(Name alias, Table<AfdianOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private AfdianOrder(Name alias, Table<AfdianOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Afdian_Order</code> table reference
     */
    public AfdianOrder(String alias) {
        this(DSL.name(alias), AFDIAN_ORDER);
    }

    /**
     * Create an aliased <code>Afdian_Order</code> table reference
     */
    public AfdianOrder(Name alias) {
        this(alias, AFDIAN_ORDER);
    }

    /**
     * Create a <code>Afdian_Order</code> table reference
     */
    public AfdianOrder() {
        this(DSL.name("Afdian_Order"), null);
    }

    public <O extends Record> AfdianOrder(Table<O> child, ForeignKey<O, AfdianOrderRecord> key) {
        super(child, key, AFDIAN_ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<AfdianOrderRecord> getPrimaryKey() {
        return Keys.AFDIAN_ORDER__PK_AFDIAN_ORDER;
    }

    @Override
    public AfdianOrder as(String alias) {
        return new AfdianOrder(DSL.name(alias), this);
    }

    @Override
    public AfdianOrder as(Name alias) {
        return new AfdianOrder(alias, this);
    }

    @Override
    public AfdianOrder as(Table<?> alias) {
        return new AfdianOrder(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AfdianOrder rename(String name) {
        return new AfdianOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AfdianOrder rename(Name name) {
        return new AfdianOrder(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AfdianOrder rename(Table<?> name) {
        return new AfdianOrder(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, Long, String, String, Long, String, String, Long, String, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
